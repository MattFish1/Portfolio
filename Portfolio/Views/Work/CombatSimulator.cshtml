@{
    ViewBag.Title = "CombatSimulator";
}


<body>
   &nbsp; &nbsp; &nbsp; &nbsp;
<div class="battleshipContainer">
<h2>Combat Simulator</h2>
<div class="button"><a href="@Url.Action("Index", "Work")">Back</a></div>
    <div class="button"><a href="https://github.com/MFisher1/MattsWeek1Solutions/raw/master/Combat%20Simulator/Combat%20Simulator/bin/Debug/Combat%20Simulator.exe">Download</a></div>
<div class="carousel1">
<img class="slideImg active" height="400px" width="600px" src="../../Content/Pictures/combatSimPic1.png" alt="img1"  />
<img class="slideImg hide" height="400px" width="600px" src="../../Content/Pictures/combatSimPic2.png" alt="img2"  />
<img class="slideImg hide" height="400px" width="600px"  src="../../Content/Pictures/combatSimPic3.png"" alt="img3"  />
    </div>

<div class="divider"></div>

<h3>Features</h3>
<ul>
    <li>Turn based RPG.</li>
    <li>User interface that allows the player choose their weapons, name and moves.</li>
    <li>Code that protects the program from recieving the wrong information from the user. This allows a more seemless user experience.</li>
    <li>Cool story and moving text!</li>
    <li>AI that chooses its own moves.</li>
</ul>

<div class="workDivider"></div>

<h3>What it took</h3>
<p>Combat Simulator was the first program where I used classes and lambdas. The separation of functions and information allows for very complicated game play.
    Lambda expressions allowed me to quickly access the information I needed and condense my code. Since this game uses classes it can easily be scaled to include
    more enemies, player choices and even allies.
</p>
    </div>
    </body>